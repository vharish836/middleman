// +build ignore

// This file generates apis.go.
// It can be invoked by running - go generate

package main

import (
	"time"
	"fmt"
	"text/template"
	"os"
	"path/filepath"
	"strings"
)

var apiTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by gen.go at
// {{ .Timestamp }}
package agent

// RegisterGeneratedAPI ...
func(s *Service) RegisterGeneratedAPI() {
{{- range $index, $element := .Apis }}
	{{ printf "s.h.RegisterAPI(\"%s\",%s)" $index $element }}
{{- end }}
}	
`))

func main() {
	apis := map[string]string{}
	err := filepath.Walk("./", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			fmt.Printf("prevent panic by handling failure accessing a path %q: %v\n", path, err)
			return err
		}
		if strings.HasPrefix(info.Name(), "api_") != true {
			return nil
		}
		api := info.Name()[4:len(info.Name())-3]
		apis[api] = "s." + strings.Title(api)
		return nil
	})

	if err != nil {
		fmt.Printf("error walking the directory: %s", err)
		return
	}

	f,err := os.Create("apis.go")
	if err != nil {
		fmt.Printf("could not create file: %s",err)
		return
	}
	defer f.Close()

	apiTemplate.Execute(f, struct {
		Timestamp time.Time
		Apis map[string]string
	}{
		Timestamp: time.Now(),
		Apis: apis,
	})
}
