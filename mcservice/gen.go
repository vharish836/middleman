// +build ignore

// This file generates apis.go.
// It can be invoked by running - go generate

package main

import (
	"errors"
	"time"
	"fmt"
	"text/template"
	"os"
	"path/filepath"
	"strings"
)

var apiTemplate = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// This file was generated by gen.go

package mcservice

// RegisterAllAPI ...
func (s *Service) RegisterAllAPI() {
	s.h.RegisterWildCardAPI(s.PassThru)	
{{- range $index, $element := .Apis }}
	{{ printf "s.h.RegisterAPI(\"%s\", %s)" $index $element }}
{{- end }}
}	
`))

var whitelist = map[string]bool {
	"gen.go": true,
	"register.go": true,
	"service.go": true,
}

func main() {
	apis := map[string]string{}
	err := filepath.Walk("./", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			fmt.Printf("prevent panic by handling failure accessing a path %q: %v\n", path, err)
			return err
		}
		if info.IsDir() {
			return nil
		}
		if whitelist[info.Name()] {
			return nil
		}
		if strings.HasPrefix(info.Name(), "api_") != true {
			s := fmt.Sprintf("file \"%s\" not in whitelist present in gen.go, please add it.\n If it as an API, please add \"api_\" to the filename.\n", info.Name())
			return errors.New(s) 
		}
		api := info.Name()[4:len(info.Name())-3]
		apis[api] = "s." + strings.Title(api)
		return nil
	})

	if err != nil {
		fmt.Printf("error walking the directory: %s", err)
		os.Exit(1)
	}

	f,err := os.Create("register.go")
	if err != nil {
		fmt.Printf("could not create file: %s",err)
		return
	}
	defer f.Close()

	apiTemplate.Execute(f, struct {
		Timestamp time.Time
		Apis map[string]string
	}{
		Timestamp: time.Now(),
		Apis: apis,
	})
}
